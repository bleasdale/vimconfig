"    __   _(_)_ __ ___  _ __ ___
"    \ \ / / | '_ ` _ \| '__/ __|
"  _  \ V /| | | | | | | | | (__
" |_|  \_/ |_|_| |_| |_|_|  \___|
"
" \\            // Nicholas's .vimrc
"  \\          //  Work machine
"   \\  //\\  //   MYVIMRC in ~
"    \\//  \\//
"     \/    \/


" This machine has a US keyboard with an awkward \ position
let mapleader=","

set nocompatible " no vi compatibility
" no bells, ever
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set cindent
set wildmenu
set wildmode=full
set wildignore+=*.swp,*.bak,*.aux,*.log,*.pdf,*.out
set showmatch
set matchtime=3
"set nowrap 
set noswapfile
set nobackup
set undodir=~/vimfiles/undodir
set undofile
set incsearch
"set lazyredraw " Make things faster? Useful if heavy macro use.
set encoding=utf-8
" Switch buffers without saving
set hidden

if has('python3')
    silent! python3 1
endif

set ruler

" 'hybrid' line numbering. Relative but current line is absolute
set number relativenumber   
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Session management
let g:sessions_dir = '~/vimfiles/sessions'
exec 'nnoremap <Leader>ss :mks! ' . g:sessions_dir . '/*.vim<C-D><BS><BS><BS><BS><BS>'
exec 'nnoremap <Leader>sr :so ' . g:sessions_dir. '/*.vim<C-D><BS><BS><BS><BS><BS>'

filetype plugin on
filetype plugin indent on

" BEGIN VUNDLE
" :PluginInstall to install plugins named below
" :PluginInstall! to reinstall plugins named below
" :PluginUpdate to update plugins
" 
filetype off
set rtp+=$HOME/vimfiles/bundle/Vundle.vim/
call vundle#begin('$HOME/vimfiles/bundle/')
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-latex/vim-latex'
Plugin 'junegunn/fzf'
Plugin 'w0rp/ale'
"Plugin 'anyakichi/vim-surround'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'itchyny/lightline.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'flazz/vim-colorschemes'
Plugin 'altercation/vim-colors-solarized'
Plugin 'thaerkh/vim-workspace'
Plugin 'mbbill/undotree'
Plugin 'jremmen/vim-ripgrep'
Plugin 'lyuts/vim-rtags'
Plugin 'SirVer/ultisnips'
Plugin 'luochen1990/rainbow'
call vundle#end()
" END VUNDLE

set shellslash
let g:tex_flavor='xelatex'
let g:Tex_CompileRule_pdf = 'xelatex --interaction=nonstopmode --shell-escape $*'
autocmd filetype tex setlocal shiftwidth=2 tabstop=2 "automatically change indent to 2 spaces for latex
"let g:tex_flavor='latex'
"let g:Tex_DefaultTargetFormat_dvi = 'dvi,ps,pdf'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_MultipleCompileFormats='pdf'
"switch to pdflatex
function SetpdfLaTeX()
    let g:Tex_CompileRule_pdf = 'pdflatex --interaction=nonstopmode -synctex=1 -src-specials $*'
endfunction
noremap <Leader>lp :<C-U>call SetpdfLaTeX()<CR>

"switch to xelatex
function SetXeLaTeX()
    let g:Tex_CompileRule_pdf = 'xelatex --interaction=nonstopmode -synctex=1 -src-specials $*'
endfunction
noremap <Leader>lx :<C-U>call SetXeLaTeX()<CR>

"colo darkblue
syntax on

" flazz/vim-colorschemes : molokai, wombat, underwoater, gruvbox, solarized, 
colorscheme wombat
" removes italic from comments, must be after setting colorscheme
highlight Comment cterm=NONE gui=NONE   

set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=grey13

" tweak the insert mode cursor a bit
highlight iCursor guifg=white guibg=yellow
set guicursor+=i:ver25-iCursor
" tweek the normal mode cursor a bit
highlight Cursor guifg=black guibg=GreenYellow

" Nerdtree
nnoremap <F6> :NERDTreeToggle<CR>

" Luochen Rainbow
let g:rainbow_active = 1

" for lightline
set laststatus=2
" Lightline
"let g:lightline = { 'colorscheme': 'blue' }
let g:lightline = {
		\ 'colorscheme': 'PaperColor_light',
		\ 'active': {
		\   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
		\ },
		\ 'component_function': {
		\   'fugitive': 'MyFugitive',
		\   'filename': 'MyFilename'
		\ }
		\ }
	function! MyModified()
		return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
	endfunction
	function! MyReadonly()
		return &ft !~? 'help\|vimfiler' && &readonly ? 'RO' : ''
	endfunction
	function! MyFilename()
		return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
		\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
		\  &ft == 'unite' ? unite#get_status_string() :
		\  &ft == 'vimshell' ? vimshell#get_status_string() :
		\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
		\ ('' != MyModified() ? ' ' . MyModified() : '')
	endfunction
	function! MyFugitive()
		if &ft !~? 'vimfiler' && exists("*fugitive#head")
			return fugitive#head()
		endif
		return ''
	endfunction
" end Lightline
"
if has("gui_running")
	"set lines=999 columns=999   " Maximise gvim window

" Remember last screen size
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vimsize'
    endif
  endfunction
  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
else
	" we are running console Vim
	if exists("+lines")
		set lines=50
	endif
	if exists("+columns")
		set columns=100
	endif
endif " has gui_running

" KEY MAPPINGS
nnoremap <leader>h :wincmd h<CR> " means \h moves the curser to the window to the right
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>
nnoremap <leader>pv :wincmd v<bar> :Ex <bar> :vertical resize 30<CR> 
nnoremap <silent> <Leader>+ :vertical resize +5<CR>
nnoremap <silent> <Leader>- :vertical resize -5<CR>
nnoremap <leader>n :bn<CR> " means \n moves to the next buffer. Current must be saved
nnoremap <leader>p :bp<CR> " previous buffer
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>sv :w <bar> :so % <CR>
nnoremap <silent> <leader>so :so $MYVIMRC<CR>
nnoremap ; : " removes two keystrokes for every command

