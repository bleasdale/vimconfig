"    __   _(_)_ __ ___  _ __ ___
"    \ \ / / | '_ ` _ \| '__/ __|
"  _  \ V /| | | | | | | | | (__
" |_|  \_/ |_|_| |_| |_|_|  \___|
"
" ||     || Nicholas's .vimrc
" ||     || Home machine
" ||=====|| MYVIMRC in ~
" ||     ||
" ||     || 

syntax on
set noerrorbells
set belloff=all
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set wildmenu
set wildmode=full
"set nowrap 
set noswapfile
set nobackup
set undodir=~/vimfiles/undodir
set undofile
set incsearch
set encoding=utf-8
set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=lightgrey


" 'hybrid' line numbering. Relative but current line is absolute
set number relativenumber   
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Session management
let g:sessions_dir = '~/vimfiles/sessions'
exec 'nnoremap <Leader>ss :mks! ' . g:sessions_dir . '/*.vim<C-D><BS><BS><BS><BS><BS>'
exec 'nnoremap <Leader>sr :so ' . g:sessions_dir. '/*.vim<C-D><BS><BS><BS><BS><BS>'

filetype plugin on
let g:tex_flavor='xelatex'
let g:Tex_CompileRule_pdf = 'xelatex --interaction=nonstopmode --shell-escape $*'
autocmd filetype tex setlocal shiftwidth=2 tabstop=2 "automatically change indent to 2 spaces for latex
"
"
"
"vim-plug
"  :PlugInstall
call plug#begin('~/vimfiles/vim-plug-plugins')
Plug 'morhetz/gruvbox'
Plug 'scrooloose/nerdtree'
Plug 'frazrepo/vim-rainbow' "Open and close bracket pair highlighter
Plug 'itchyny/lightline.vim' "Fancy status bars
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'terryma/vim-multiple-cursors'
Plug 'preservim/nerdcommenter'
Plug 'vim-latex/vim-latex'
Plug 'editorconfig/editorconfig-vim'
Plug 'jremmen/vim-ripgrep'
Plug 'vim-utils/vim-man' "Linux, Unix, BSD man pages from Vim
Plug 'lyuts/vim-rtags'
Plug 'Valloric/YouCompleteMe'
Plug 'mbbill/undotree'
Plug 'junegunn/fzf', { 'dir': '~/vimfiles/vim-plug-plugins/.fzf', 'do': './install --all' }
Plug 'stefandtw/quickfix-reflector.vim' "acts on ripgrep quickfix list and writes changes out to all files
Plug 'flazz/vim-colorschemes'
call plug#end()

"lightline
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'PaperColor_light',
      \ }

colorscheme gruvbox
set background=dark
" removes italic from comments, must be after setting colorscheme
highlight Comment cterm=NONE gui=NONE   
highlight normal guibg=black

" get ripgrep's root directory correct
if executable('rg')
    let g:rg_derive_root='true'
endif

"NERDTree
nmap <F6> :NERDTreeToggle<CR>

"UndoTree
nnoremap <F5> :UndotreeToggle<CR>

" vim-rainbow  :RainbowToggle
let g:rainbow_active = 1
let g:rainbow_load_separately = [
    \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
    \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
    \ ]

let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']

" KEY MAPPINGS
nnoremap <leader>h :wincmd h<CR> " means \h moves the curser to the window to the right
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>
nnoremap <leader>pv :wincmd v<bar> :Ex <bar> :vertical resize 30<CR>
nnoremap <silent> <Leader>+ :vertical resize +5<CR>
nnoremap <silent> <Leader>- :vertical resize -5<CR>
nnoremap <leader>n :bn<CR> " means \n moves to the next buffer. Current must be saved
nnoremap <leader>p :bp<CR> " previous buffer


"bash
    let g:ycm_semantic_triggers = {
        \ 'tex'  : ['{']
    \}

if has("gui_running") 
    "set guifont=:set guifont=Consolas:h12:cANSI:qDRAFT
    set guifont=Lucida_Console:h10:cANSI:qDRAFT
    	"set lines=999 columns=999   " Maximise gvim window
" Remember last screen size
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vimsize'
    endif
  endfunction
  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
else
	" we are running console Vim
	if exists("+lines")
		set lines=50
	endif
	if exists("+columns")
		set columns=100
	endif
endif " has gui_running




